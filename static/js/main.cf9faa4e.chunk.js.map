{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js","useLocation.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","message","defaultProps","ReactDOM","render","content","_useLocation","_useState","useState","_useState2","Object","slicedToArray","setLat","_useState3","_useState4","errorMessage","setErrorMessage","useEffect","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","err","useLocation","_useLocation2","src_SeasonDisplay_0","src_Spinner","document","querySelector"],"mappings":"gKAGMA,SAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,mBACNC,SAAU,eAyBCE,EAbO,SAAAC,GACpB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIDK,EAEFZ,EAAaS,GAAhCP,EAFqBU,EAErBV,KAAMC,EAFeS,EAEfT,SAEd,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBR,IAChCI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,qBAAAC,OAAuBd,EAAvB,WACZU,EAAAC,EAAAC,cAAA,UAAKb,GACLW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAwBd,EAAxB,aC5BZe,EAAU,SAAAZ,GACd,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBV,EAAMa,WAKjDD,EAAQE,aAAe,CACrBD,QAAS,cAGID,QCgCfG,IAASC,OAAOT,EAAAC,EAAAC,cAzCJ,WAAM,IAGZQ,EAHYC,ECHlB,WAAqB,IAAAC,EACKC,mBAAS,MADdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACVlB,EADUoB,EAAA,GACLG,EADKH,EAAA,GAAAI,EAEqBL,mBAAS,IAF9BM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEZE,EAFYD,EAAA,GAEEE,EAFFF,EAAA,GASnB,OANAG,oBAAW,WACTC,OAAOC,UAAUC,YAAYC,mBAC3B,SAAAC,GAAQ,OAAIV,EAAOU,EAASC,OAAOC,WACnC,SAAAC,GAAG,OAAIT,EAAgBS,EAAIxB,YAE3B,IACG,CAACZ,EAAK0B,GDLeW,GADZC,EAAAjB,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACTjB,EADSsC,EAAA,GACJZ,EADIY,EAAA,GAWhB,OANEtB,EADCU,EACSpB,EAAAC,EAAAC,cAAA,qBAAakB,GACf1B,EACEM,EAAAC,EAAAC,cAAC+B,EAAD,CAAevC,IAAKA,IAEpBM,EAAAC,EAAAC,cAACgC,EAAD,CAAS5B,QAAQ,mCAEtBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaO,IA8BrB,MAASyB,SAASC,cAAc","file":"static/js/main.cf9faa4e.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig = {\n  summer: {\n    text: \"Let's hit the beach!\",\n    iconName: 'sun'\n  },\n  winter: {\n    text: 'Burr it is cold!',\n    iconName: 'snowflake'\n  }\n};\n\nconst getSeason = (lat, month) => {\n  if (month > 2 && month < 9) {\n    return lat > 0 ? 'summer' : 'winter';\n  } else {\n    return lat > 0 ? 'winter' : 'summer';\n  }\n};\n\nconst SeasonDisplay = props => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const { text, iconName } = seasonConfig[season];\n\n  return (\n    <div className={`season-display ${season}`}>\n      <i className={`icon-left massive ${iconName} icon`} />\n      <h1>{text}</h1>\n      <i className={`icon-right massive ${iconName} icon`} />\n    </div>\n  );\n};\n\nexport default SeasonDisplay;\n","import React from 'react';\n\nconst Spinner = props => {\n  return (\n    <div className=\"ui active dimmer\">\n      <div className=\"ui big text loader\">{props.message}</div>\n    </div>\n  );\n};\n\nSpinner.defaultProps = {\n  message: 'Loading...'\n};\n\nexport default Spinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\nimport useLocation from './useLocation';\nconst App = () => {\n  const [lat, errorMessage] = useLocation();\n\n  let content;\n  if(errorMessage){\n    content = <div>Error: {errorMessage}</div>;\n  }else if (lat) {\n    content = <SeasonDisplay lat={lat}/>;\n  } else {\n    content = <Spinner message=\"Please accept location request\" />;\n  }\n  return <div className=\"boder red\">{content}</div>\n};\n\n// class App extends React.Component {\n//   state = { lat: null, errorMessage: '' };\n\n//   componentDidMount() {\n//     window.navigator.geolocation.getCurrentPosition(\n//       position => this.setState({ lat: position.coords.latitude }),\n//       err => this.setState({ errorMessage: err.message })\n//     );\n//   }\n\n//   renderContent() {\n//     if (this.state.errorMessage && !this.state.lat) {\n//       return <div>Error: {this.state.errorMessage}</div>;\n//     }\n\n//     if (!this.state.errorMessage && this.state.lat) {\n//       return <SeasonDisplay lat={this.state.lat} />;\n//     }\n\n//     return <Spinner message=\"Please accept location request\" />;\n//   }\n\n//   render() {\n//     return <div className=\"border red\">{this.renderContent()}</div>;\n//   }\n// }\n\nReactDOM.render(<App />, document.querySelector('#root'));\n","import {useState, useEffect} from 'react';\r\n\r\nexport default () => {\r\n    const [lat, setLat] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  useEffect((()=>{\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      position => setLat(position.coords.latitude),\r\n      err => setErrorMessage(err.message)\r\n    );\r\n  }), []);\r\n  return [lat, errorMessage];\r\n};"],"sourceRoot":""}